// reset-database.js - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
const { Pool } = require('pg');
require('dotenv').config();

// –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER || 'iot_user',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'iot_devices',
  password: process.env.DB_PASSWORD || 'Tomwoker159357',
  port: process.env.DB_PORT || 5432,
});

async function resetDatabase() {
  const client = await pool.connect();
  
  try {
    console.log('üóëÔ∏è  –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ...');
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (—á–µ—Ä–µ–∑ foreign keys)
    await client.query('DROP TABLE IF EXISTS device_history CASCADE');
    await client.query('DROP TABLE IF EXISTS user_devices CASCADE');
    await client.query('DROP TABLE IF EXISTS devices CASCADE');
    await client.query('DROP TABLE IF EXISTS users CASCADE');
    
    console.log('‚úÖ –°—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–æ');
    
    console.log('üèóÔ∏è  –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ...');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    await client.query(`
      CREATE TABLE users (
        id SERIAL PRIMARY KEY,
        google_id VARCHAR(255) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255),
        picture TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        last_login TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è users —Å—Ç–≤–æ—Ä–µ–Ω–∞');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    await client.query(`
      CREATE TABLE devices (
        id SERIAL PRIMARY KEY,
        device_id VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è devices —Å—Ç–≤–æ—Ä–µ–Ω–∞');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤'—è–∑–Ω—É —Ç–∞–±–ª–∏—Ü—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á-–ø—Ä–∏—Å—Ç—Ä—ñ–π
    await client.query(`
      CREATE TABLE user_devices (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        device_id INTEGER REFERENCES devices(id) ON DELETE CASCADE,
        is_owner BOOLEAN DEFAULT false,
        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, device_id)
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è user_devices —Å—Ç–≤–æ—Ä–µ–Ω–∞');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    await client.query(`
      CREATE TABLE device_history (
        id SERIAL PRIMARY KEY,
        device_id VARCHAR(255),
        relay_state BOOLEAN,
        wifi_rssi INTEGER,
        uptime INTEGER,
        free_heap INTEGER,
        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—è device_history —Å—Ç–≤–æ—Ä–µ–Ω–∞');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    console.log('üìá –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏...');
    
    await client.query('CREATE INDEX idx_users_google_id ON users(google_id)');
    await client.query('CREATE INDEX idx_users_email ON users(email)');
    await client.query('CREATE INDEX idx_devices_device_id ON devices(device_id)');
    await client.query('CREATE INDEX idx_device_history_device_id_timestamp ON device_history(device_id, timestamp DESC)');
    await client.query('CREATE INDEX idx_user_devices_user_id ON user_devices(user_id)');
    await client.query('CREATE INDEX idx_user_devices_device_id ON user_devices(device_id)');
    
    console.log('‚úÖ –Ü–Ω–¥–µ–∫—Å–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    
    // –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    console.log('\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:');
    
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('\n–¢–∞–±–ª–∏—Ü—ñ:');
    tables.rows.forEach(row => {
      console.log(`  - ${row.table_name}`);
    });
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!');
    console.log('\nüí° –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Å–µ—Ä–≤–µ—Ä: npm start');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:', error.message);
    console.error('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:');
    console.error('  1. –ß–∏ –∑–∞–ø—É—â–µ–Ω–∏–π PostgreSQL?');
    console.error('  2. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ .env —Ñ–∞–π–ª—ñ?');
    console.error('  3. –ß–∏ —ñ—Å–Ω—É—î –±–∞–∑–∞ –¥–∞–Ω–∏—Ö iot_devices?');
    console.error('\n–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö –≤—Ä—É—á–Ω—É:');
    console.error('  psql -U postgres');
    console.error('  CREATE DATABASE iot_devices;');
    console.error('  CREATE USER iot_user WITH PASSWORD \'Tomwoker159357\';');
    console.error('  GRANT ALL PRIVILEGES ON DATABASE iot_devices TO iot_user;');
    
  } finally {
    client.release();
    pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
console.log('üöÄ Solar Controller - Database Reset Script');
console.log('==========================================\n');

resetDatabase();